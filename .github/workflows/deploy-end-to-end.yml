name: End-to-End Deployment

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - prod
      chart_source:
        description: 'Helm chart source'
        required: false
        default: 'local'
        type: choice
        options:
          - local
          - git
          - oci
          - repo

jobs:
  # Step 1: Build and push container image
  build-image:
    name: Build and Push Image
    uses: ./.github/workflows/build-and-push.yml
    secrets: inherit
    permissions:
      contents: read
      id-token: write
      packages: write
      security-events: write

  # Step 2: Deploy infrastructure with Terraform
  deploy-infrastructure:
    name: Deploy Infrastructure
    needs: build-image
    uses: ./.github/workflows/terraform-deploy.yml
    secrets: inherit
    permissions:
      contents: read
      id-token: write

  # Step 3: Deploy application with Helm
  deploy-application:
    name: Deploy Application
    needs: deploy-infrastructure
    uses: ./.github/workflows/helm-deploy.yml
    with:
      environment: ${{ github.event.inputs.environment || 'dev' }}
      chart_version: '1.0.0'
      chart_source: ${{ github.event.inputs.chart_source || 'local' }}
    secrets: inherit
    permissions:
      contents: read
      id-token: write

  # Step 4: Deployment summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [build-image, deploy-infrastructure, deploy-application]
    
    steps:
      - name: Create deployment summary
        run: |
          cat >> $GITHUB_STEP_SUMMARY << 'EOF'
          # ðŸŽ‰ End-to-End Deployment Complete!
          
          ## Deployment Pipeline
          
          1. âœ… **Container Image Built and Pushed**
             - Image built from source code
             - Pushed to Amazon ECR
             - Security scanned with Trivy
          
          2. âœ… **Infrastructure Deployed**
             - VPC and networking created
             - EKS cluster provisioned (~15 min)
             - MongoDB VM deployed
             - All resources ready
          
          3. âœ… **Application Deployed**
             - Helm chart installed
             - Pods running in EKS
             - LoadBalancer provisioned
             - Application accessible
          
          ## Environment
          
          - **Environment**: ${{ github.event.inputs.environment || 'dev' }}
          - **Chart Source**: ${{ github.event.inputs.chart_source || 'local' }}
          - **Deployed by**: @${{ github.actor }}
          - **Workflow Run**: ${{ github.run_id }}
          
          ## Next Steps
          
          ### Access the Application
          ```bash
          # Get LoadBalancer URL
          kubectl get svc -n todo-app todo-app-loadbalancer
          ```
          
          ### Verify Deployment
          ```bash
          # Check pods
          kubectl get pods -n todo-app
          
          # View logs
          kubectl logs -f -l app=todo-app -n todo-app
          
          # Check Helm release
          helm status todo-app -n todo-app
          ```
          
          ### Cleanup
          ```bash
          # Remove application
          ./scripts/cleanup-helm.sh --force
          
          # Destroy infrastructure
          cd terraform && terraform destroy -auto-approve
          ```
          
          ---
          
          **Total Pipeline Time**: Approximately 25-35 minutes
          
          For detailed logs, check individual workflow runs above.
          EOF
