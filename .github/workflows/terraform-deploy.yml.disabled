name: Terraform Deploy Infrastructure

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Terraform action to perform'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
          - destroy

env:
  AWS_REGION: us-east-1
  TF_VERSION: 1.9.0

jobs:
  terraform:
    runs-on: ubuntu-latest
    name: Terraform ${{ github.event.inputs.action }}

    permissions:
      contents: read
      id-token: write
      pull-requests: write

    defaults:
      run:
        working-directory: terraform

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: ${{ env.TF_VERSION }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/GitHubActionsTerraformRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Verify terraform.tfvars exists
        run: |
          if [ ! -f terraform.tfvars ]; then
            echo "❌ terraform.tfvars not found!"
            echo "Please create terraform.tfvars from terraform.tfvars.example"
            exit 1
          fi
          echo "✅ terraform.tfvars found"

      - name: Terraform Format Check
        id: fmt
        run: terraform fmt -check -recursive
        continue-on-error: true

      - name: Terraform Init
        id: init
        run: terraform init

      - name: Terraform Validate
        id: validate
        run: terraform validate

      - name: Run Security Scan (tfsec)
        uses: aquasecurity/tfsec-action@v1.0.3
        with:
          working_directory: terraform
          soft_fail: true

      - name: Terraform Plan
        id: plan
        if: github.event.inputs.action == 'plan' || github.event.inputs.action == 'apply'
        run: terraform plan -no-color
        continue-on-error: true

      - name: Terraform Apply
        id: apply
        if: github.event.inputs.action == 'apply'
        run: terraform apply -auto-approve

      - name: Terraform Destroy
        id: destroy
        if: github.event.inputs.action == 'destroy'
        run: terraform destroy -auto-approve

      - name: Output Summary
        run: |
          echo "## Terraform ${{ github.event.inputs.action }} Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ github.event.inputs.action }}" == "apply" ]; then
            echo "✅ Infrastructure deployed successfully!" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Next Steps:" >> $GITHUB_STEP_SUMMARY
            echo "1. Update k8s/configmap.yaml with MongoDB IP" >> $GITHUB_STEP_SUMMARY
            echo "2. Configure kubectl: \`aws eks update-kubeconfig --region ${{ env.AWS_REGION }} --name wiz-exercise-cluster\`" >> $GITHUB_STEP_SUMMARY
            echo "3. Deploy application: \`./deploy.sh\`" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ github.event.inputs.action }}" == "destroy" ]; then
            echo "✅ Infrastructure destroyed successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "✅ Terraform plan completed. Review the plan above." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Terraform Output
        if: github.event.inputs.action == 'apply'
        run: terraform output -json

      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖\`${{ steps.validate.outcome }}\`
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`

            <details><summary>Show Plan</summary>

            \`\`\`terraform
            ${{ steps.plan.outputs.stdout }}
            \`\`\`

            </details>

            *Pushed by: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })
